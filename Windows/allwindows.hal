external function string 60 UserDefined(string,string);
external procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
remote function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc,var Integer);
external procedure DisplayRecordDetails_RUS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external procedure DrawPOSInterface_RUS(string,string,record POSButtonsVc,Integer,string,Integer);
remote procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
external function string 255 VATZoneNameRUS();
external function string 255 VATZoneEditFieldLabelRUS(Integer);
external function Boolean HasMultiLocations();
external function Boolean HasCharts();
external function Boolean HasAdvancedAccounting();
external function Boolean HasPositions();
external function Boolean HasSalesGroup();
external function Boolean HasLanguages();
external function Boolean HasItemGroups();
external function Boolean HasAdvancedPricing();
external function Boolean HasApprovals();
external function real VATZoneButtonsLabelsRUS(real,real,real,real);
external function Boolean HasVATZone();
external function Boolean IsSessionOpen(string,string,Date,Time);
external function Boolean HasJewelleryInterface();
external function Boolean CUVATNrColumn;
external function Boolean HasOfficialSerNr();
external function Boolean HasItemClassification();
external function Boolean CheckOffLineRecords(Boolean);
external function Boolean UseTaxTemplatesforTaxCalc();
external function Boolean HasMetroTestFeatures();
external function Boolean HasLimitedAccess();
external function Boolean IsEnterprise();

external function Boolean HasATOL();

external function Boolean HasAccPeriods();
external function Boolean HasAccessGroups();
external function Boolean HasAddFee();
external function Boolean HasApprovals();
external function Boolean HasCCPayments();
external function Boolean HasAdvancedAccounting();
external function Boolean HasAdvancedCRM();
external function Boolean HasAdvancedPricing();
external function Boolean HasAdvancedProduction();
external function Boolean HasAdvancedStock();
external function Boolean HasAged();
external function Boolean HasBar();
external function Boolean HasBase2();
external function Boolean HasBranch();
external function Boolean HasBuyBack();
external function Boolean HasCategories();
//external function Boolean HasConsigmentStock();
external function Boolean HasCommunicator();
external function Boolean HasConsignmentStock();
external function Boolean HasContactClassification();
external function Boolean HasContactRelations();
external function Boolean HasConsolidation();
external function Boolean HasCountryPerCustomer();
external function Boolean HasCreditLimit();
external function Boolean HasCustItem();
external function Boolean HasCustomerSearchKey();
external function Boolean HasDownpayments();
external function Boolean HasDefineColumns();
external function Boolean HasDeliveryAddress();
external function Boolean HasDepartments();
external function Boolean HasETaxDocuments();
external function Boolean HasEInvoicing();
external function Boolean HasEndorsedChecks();
external function Boolean HasExtraNLComment();
external function Boolean HasExtTax();
external function Boolean HasFavouriteActTypes();
external function Boolean HasFiscalPrinter();
external function Boolean HasFormEditor();
external function Boolean HasFreightAdvanced();
external function Boolean HasHideCostPrice();
external function Boolean HasHotelInterface();
external function Boolean HasGuestUserDefined();
external function Boolean HasJewelleryInterface();
external function Boolean HasIncomeAndExpenseBook();
external function Boolean HasIOUChecks();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLimitedAccess();
external function Boolean HasLocalMachines();
external function Boolean HasLoyaltyCards();
external function Boolean HasMailTags();
external function Boolean HasMainPartner();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNLBudget();
external function Boolean HasNLBudgetClass();
external function Boolean HasObjects();
external function Boolean HasInvoiceOfficialSerNr();
external function Boolean HasOfficialSerNr();
external function Boolean HasOrderClasses();
external function Boolean HasPreferedOfficialSerNr();
external function Boolean HasNumberSeries();
external function Boolean HasPersons();
external function Boolean HasPocketScreen();
external function Boolean HasPositions();
external function Boolean HasPrepayments();
external function Boolean HasProjects();
external function Boolean HasPriceLists();
external function Boolean HasQualityControl();
external function Boolean HasReconLevel2();
external function Boolean HasReminderLevel();
external function Boolean HasRemoteBackup();
external function Boolean HasResourceDisplayGroups();
external function Boolean HasRussianPrepayment();
external function Boolean HasRetGoodsToSupp();
external function Boolean HasReturnedGoods();
external function Boolean HasRoute();
external function Boolean HasSalesman();
external function Boolean HasSalesmanBonus();
external function Boolean HasSalesGroup();
external function Boolean HasSecondQuantity();
external function Boolean HasSerialNumbers();
external function Boolean HasServerInCloud();
external function Boolean HasSettlementDiscount();
external function Boolean HasSimulations();
external function Boolean hasSimAccruals();
external function Boolean HasSkypeConnection();
external function Boolean HasSIPServerConnection();
external function Boolean HasStrAsSignFType();
external function Boolean HasTouchScreenDevice();
external function Boolean HasTaxMatrix();
external function Boolean HasTestFeatures();
external function Boolean HasMetroTestFeatures();
external function Boolean HasWorkOrders();
external function Boolean HasThrouLocation();
external function Boolean HasTouchScreenLook();
external function Boolean HasTREO();
external function Boolean HasVarieties();
external function Boolean HasVATZone();
external function Boolean HasWithholdingTax();
external function Boolean HasWithholdingTaxAdvanced();
external function Boolean HasWorkOrders();

external function Boolean HasStandardCRM();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();

external function Boolean HasEMail();
external function Boolean HasExternalEMail();

external function Boolean HasModAT2();
external function Boolean HasModBA();
external function Boolean HasModCheck();
external function Boolean HasModCL();
external function Boolean HasModCO();
external function Boolean HasModCons();
external function Boolean HasModCourses();
external function Boolean HasModCredMan();
external function Boolean HasModCRM();
external function Boolean HasModEDI();
external function Boolean HasModExp();
external function Boolean HasModHotel();
external function Boolean HasModHRM();
external function Boolean HasModIN();
external function Boolean HasModIntStock();
external function Boolean HasModNL();
external function Boolean HasPaymentGateway();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModPL();
external function Boolean HasModPOProg();
external function Boolean HasModPP();
external function Boolean HasModProd();
external function Boolean HasModQT();
external function Boolean HasModRent();
external function Boolean HasModRest();
external function Boolean HasModRsrt();
external function Boolean HasModSO();
external function Boolean HasModSL();
external function Boolean HasModSVO();
external function Boolean HasModTS();
external function Boolean HasModWHM();
external function Boolean HasModDI();
external function Boolean UsePostOKButton();
external function Boolean HasBankImport();
external function Boolean StandardHansa();

SetLangMode(LangRussian,"RUS",0); //##ii

window INSClass:4
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real v;
  
  WindowBegin("Выберите товар",INSClass,CGslist,-);
  Sizeable(-1,-1,0,0);
  UseView(INVc);
  SpawnClass(INDClass);
      v = 0;
      if (GuiType==kGuiCocoa) then begin
        SetWRect(210,80,850,498);
        FlowView(0,0,-1,200);
        v = v+200;
      end else begin
        SetWRect(210,80,850,298);
      end;
      RecordList(4,v+17,-21,-39);
      RlColKey(4,4,"Код",Code,false,ActCode);
    if (HasItemGroups) then begin
        RlColKey(105,105,"Группа",Group,false,ActGroup);
        RlColKey(160,160,"Наименование",Name,false,ActName);
      end else begin
        RlColKey(105,105,"Наименование",Name,false,ActName);
      end;
      if (IsEnterprise) then begin
      	if (StandardHansa==false) then begin
        	RlColKey(-250,-250,"Альт. код",AlternativeCode,false,ActAlternativeCode);
      	end else begin
        	RlCol(-250,-250,"Штрих-код",BarCode,false);
      	end;
      end;
      if (HasModIN) then begin
        RlCol(-120,-120,"Баз. цена",UPrice1,false); //Edit***************************Sasha2,12:15 06.06.2016
      end else begin
        RlCol(-120,-120,"Цена",UPrice1,false); //Edit***************************Sasha2,12:15 06.06.2016
      end;
      if (HasModIN) then begin
        CalculatedColumn(-50,-50,"На складе","INSClassInStock",false); //Edit***************************Sasha2,12:15 06.06.2016
      end;
      SearchField("Поиск");
      if (HasModIN) then begin
        if (UserCanReport("INInfoRn","",true)) then begin
      SpecialMenu("Статус товара",'i',0,"INStatusINSsm");
        end;
      end;
      if (IsEnterprise) then begin
        SpecialMenu("Поиск",'F',1,"INSearchSsm");
        if (StandardHansa==false) then begin
          SpecialMenu("Товары-заменители",'l',2,"AltItemINSsm");
          SpecialMenu("Сопутствующие товары",'r',2,"CrossItemINSsm");
        end;
      end;
//  SearchField("Поиск");
  EndWindow;
end;

window INDClass:8
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  integer tilenr;
  real h,h1,h2,h3,h4,h5,h6,v,vm,vs;
  string 255 label;

  WindowBegin("Товар",INDClass,CGview,-);
  SetWRect(20,80,830,400);
  Sizeable(-1,-1,-1,0);
  DynamicWindow;
  UseView(INVc);
  if (GuiType==kGuiAndroid) then begin
    ToolBar;
    PushButton(-110,5,-10,25,ToolImagePicker,"Фото"); 
    EndToolBar;
  end;

  if (HasJewelleryInterface) then begin
    Tile(0,107,false,"",Code);
  end else begin
    Tile(0,87,false,"",Code);
  end;
  v = 6; vs = 20; h = 155; h1 = 300; h2 = 385; h3 = 395; h4 = 285; h5 = 433;
  EditField(h,v, 150,"Код товара",Normal,Code,false,0);
  EditField(h2,v,80,"Группа",Normal,Group,false,ITSClass);
  EditField(h,v+=vs,-40,"Наименование",Normal,Name,false,0);
  if (HasJewelleryInterface) then begin
    EditField(h,v+=vs,150,"Альтернативный код",Normal,AlternativeCode,false,0);
  end;
  tilenr = 1;
  TileButton(tilenr,"Цена"); tilenr = tilenr + 1;
  if (HasJewelleryInterface) then begin
    TileButton(tilenr,"Ювелир."); tilenr = tilenr + 1;
    TileButton(tilenr,"Часы"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Склад"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
    TileButton(tilenr,"Упр. складом"); tilenr = tilenr + 1;
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
    TileButton(tilenr,"Стоимость"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Структура"); tilenr = tilenr + 1;
  TileButton(tilenr,"Счета"); tilenr = tilenr + 1;
  if (GuiType==kGuiiPhone) then begin
    TileButton(tilenr,"Изобр."); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Варианты"); tilenr = tilenr + 1;
  TileButton(tilenr,"Текст"); tilenr = tilenr + 1;
  TileButton(tilenr,"Модель ст-ти"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
    TileButton(tilenr,"Доп.данные"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Записки"); tilenr = tilenr + 1;  
  if (HasCharts) then begin
    TileButton(tilenr,"Аналитика"); tilenr = tilenr + 1;
  end;
  tilenr = 1;
  CheckBox(h,v+=vs,0,"Закрыт",Terminated);
  CheckBox(h2,v,0,"Не для продажи",NotForSales);
  Tile(tilenr,209,false,tilenr,Unittext); tilenr = tilenr + 1;
  EditField(h,v=6 ,100,"Единица измерения",Normal,Unittext,false,UnitSClass);
  if (HasJewelleryInterface) and (UserCanAction("ViewCostPrice",true)) then begin
    EditField(h,v+=vs,100,"Стоимость",Normal,InPrice,true,0);
  end;
  EditField(h,v+=vs,100,"Базовая цена",Normal,UPrice1,true,0);
  EditField(h,v+=vs,100,"Изменение баз. цены",ViewOnly,LastBasePriceChange,true,0);
  EditField(h,v+=vs,100,"Prom.ua цена",Normal,PromPrice,true,0);// Edit ************************** Wednesday, 22 March 2017 12:05:02
  EditField(h,v+=vs,100,"Prom.ua себест.",Normal,LastCost,true,0);// Edit ************************** Wednesday, 22 March 2017 12:05:02
  EditField(h,v+=vs,100,"Prom.ua дублиров.",Normal,PromDubl,true,0);// Edit ************************** Wednesday, 22 March 2017 12:05:02
  
  //EditField(h,v+=vs,100,"Фактор цены",Normal,PriceFactor,true,0);
  //EditField(h,v+=vs,100,"Формула тов.",Normal,CalcPrice,false,CPMSClass);
  EditField(h,v+=vs,100,"Наценка, %",Normal,Markup,true,0);
  //EditField(h,v+=vs,100,"% премии",Normal,Bonus,true,0);
  EditField(h,v+=vs,-240,"Объекты",Normal,Objects,false,ObjSClass);
  if (HasItemClassification) then begin
    EditField(h,v+=vs,-240,"Классификация",Normal,DispGroups,false,DISClass);
  end;
  if (StandardHansa==false) then begin
    ButtonFrame(h1,v=24,120,4,"Тип товара");
  end else begin
    ButtonFrame(h1,v=24,120,3,"Тип товара");   // From dict
  end;
  RadioButton(h1,v,kItemTypePlain,0,"Свободный",ItemType);
  RadioButton(h1,v+=16,kItemTypeStocked,0,"Складируемый",ItemType);
  RadioButton(h1,v+=16,kItemTypeStructured,0,"Структурирован.",ItemType);
  if (StandardHansa==false) then begin
    RadioButton(h1,v+=16,kItemTypeService,0,"Работа",ItemType);
  end;
  EndFrame;
  
  Pict_Field(-205,8,-35,178,"");
  if (GuiType==kGuiCocoa) then begin
    PushButton(-160,182,-80,202,ToolImagePicker,"Добавить");
  end;
  if (StandardHansa==false) then begin
    CheckBox(h1,v+=32,0,"В проекте товар как материал",ItemMaterial);
  end;
  
  ButtonFrame(h5+100,v=24,120,3,"Редактирование цены"); //Edit***************************Sasha2,16:33 13.09.2016 {
  RadioButton(h5+100,v,0,0,"По группе",ChangePrice);
  RadioButton(h5+100,v+=16,1,0,"Запретить",ChangePrice);
  RadioButton(h5+100,v+=16,2,0,"Разрешить",ChangePrice);
  EndFrame; //Edit***************************Sasha2,16:33 13.09.2016 }
  
  if (HasJewelleryInterface) then begin
    Tile(tilenr,110,false,tilenr,Metal); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Метал",Normal,Metal,false,0);
    EditField(h,v+=vs, 140,"Вес",Normal,RowWeight,false,0);
    EditField(h,v+=vs, 140,"Размер",Normal,Size,false,0);
    EditField(h,v+=vs, 140,"Длина",Normal,Length,false,0);
    EditField(h,v+=vs, 140,"Ссылка",Normal,Reference,false,0);
    v = 6;
    EditField(h5,v, 140,"Гл. камень детали",Normal,MajStoneDet,false,0);
    EditField(h5,v+=vs, 140,"Цвет",Normal,Colour,false,0);
    EditField(h5,v+=vs, 140,"Прозрачность",Normal,Clarity,false,0);
    EditField(h5,v+=vs, 140,"Сертификат",Normal,Cert,false,0);
    EditField(h5,v+=vs, 140,"Мин. камень детали",Normal,MinStoneDet,false,0);
    Tile(tilenr,90,false,tilenr,WatchBrand); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Марка часов",Normal,WatchBrand,false,0);
    EditField(h,v+=vs, 140,"Наим. стиля",Normal,StyleName,false,0);
    EditField(h,v+=vs, 140,"Метал часов",Normal,WatchMetal,false,0);
    EditField(h,v+=vs, 140,"Движение",Normal,Movement,false,0);
    v = 6;
    EditField(h5,v, 140,"Браслет/ремешок",Normal,BrcStr,false,0);
    EditField(h5,v+=vs, 140,"Род",Normal,Gender,false,0);
    EditField(h5,v+=vs, 140,"Проч.",Normal,Other,false,0);
    EditField(h5,v+=vs, 140,"Проч.2",Normal,Other2,false,0);
  end;
  Tile(tilenr,170,false,tilenr,MinLevel);  tilenr = tilenr + 1; // Need to clean this Tile up!
  v = 6;
  vm = v;
  ButtonFrame(h1,v+=24,143,3,"Серийные номера");
  RadioButton(h1,v,0,0,"нет",SerNrf);
  RadioButton(h1,v+=16,1,0,"на единицу",SerNrf);
  RadioButton(h1,v+=16,2,0,"на партию",SerNrf);
  CheckBox(h1+200,v,0,"Не требовать номер партии на сч/ф POS",DonotRequireBatchNrOnIVCash);
  EditField(h,v=6,100,"Мин. кол-во на скл.",Normal,MinLevel,true,0);
  EditField(h,v+=vs,100,"Макс. кол-во на скл.",Normal,MaxLevel,true,0);
  EditField(h,v+=vs  ,100,"Отдел",Normal,Department,false,DepSClass);
  EditField(h,v+=vs  ,100,"Полка",Normal,InvCode,false,0);
  EditField(h,v+=vs,100,"Источник по умолч.",Normal,DefaultSource,false,SourceSClass);
  EditField(h5,v ,50,"Налог на окр. среду/кг",Normal,RepaPricePerWeight,true,0);
  EditField(h6=650,v ,80,"Основной тип заказа",Normal,DefOrderType,false,SetSClass);  
  if (StandardHansa==false) then begin
    EditField(h,v+=vs ,100,"Степень риска",Normal,HazLevCode,false,HazLevSClass);
    EditField(h5,v ,50,"% алкоголя",Normal,AlcPrc,true,0);
    EditField(h6,v, 80,"Тип скл. товара",Normal,StockItemType,false,SetSClass); 
  end;
  EditField(h,v+=vs ,100,"Единица 2",Normal,Unittext2,false,UnitSClass);
  EditField(h5,v ,50,"Конвертация 1",Normal,Conversion1,true,0);
  EditField(h,v+=vs,100,"Коэфф-нт единицы",Normal,UnitCoefficient,true,0);
  EditField(h5,v ,50,"Конвертация 2",Normal,Conversion2,true,0);
  if (StandardHansa==true) then begin
    EditField(h,v+=vs ,50,"Ширина",Normal,Width,true,0);
    EditField(h4,v ,50,"Высота",Normal,Height,true,0);
    EditField(h5,v ,50,"Глубина",Normal,Depth,true,0);
    EditField(h,v+=vs ,50,"Объем",Normal,Volume,true,0);
    EditField(h4,v ,50,"Плотность",Normal,Density,true,0);
    EditField(h5,v ,50,"Вес",Normal,Weight,true,0);
  end;
  if (StandardHansa==false) then begin
    Tile(tilenr,170,false,tilenr,LocArea);  tilenr = tilenr + 1;
    EditField(h,vm=(v=6) ,100,"Товар паллеты",Normal,DefPalletItem,true,INSClass);
    EditField(h5,v ,80,"Участок погрузки",Normal,PickArea,false,LocAreaSClass);
    EditField(h,v+=vs ,100,"Участ. скл. по умолч.",Normal,LocArea,false,LocAreaSClass);
    EditField(h5,v ,50,"Паллет на погрузке",Normal,PalletsInPickArea,true,0);
    EditField(h,v+=vs ,50,"Макс. кол. на паллете",Normal,QtyonPallet,true,0);
    EditField(h4,v ,50,"Слои в палл.",Normal,PalletLayers,true,0);
    EditField(h5,v ,50,"Кол-во в слое",Normal,QtyonPalletLayer,true,0);
    EditField(h,v+=vs ,50,"Ширина паллеты",Normal,PalletWidth,true,0);
    EditField(h4,v ,50,"Высота",Normal,PalletHeight,true,0);
    EditField(h5,v ,50,"Глубина",Normal,PalletDepth,true,0);
    EditField(h,v+=vs ,50,"Шир. места по умолч.",Normal,DefPosWidth,true,0);
    EditField(h4,v ,50,"Высота",Normal,DefPosHeight,true,0);
    EditField(h5,v ,50,"Глубина",Normal,DefPosDepth,true,0);
    EditField(h,v+=vs ,50,"Ширина",Normal,Width,true,0);
    EditField(h4,v ,50,"Высота",Normal,Height,true,0);
    EditField(h5,v ,50,"Глубина",Normal,Depth,true,0);
    EditField(h,v+=vs ,50,"Объем",Normal,Volume,true,0);
    EditField(h4,v ,50,"Плотность",Normal,Density,true,0);
    EditField(h5,v ,50,"Нетто",Normal,NetWeight,true,0);
    EditField(h5,v+=vs ,50,"Вес",Normal,Weight,true,0);
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
  Tile(tilenr,190,false,tilenr,InPrice);  tilenr = tilenr + 1;
  EditField(h,vm=(v=6),100,"Стоимость",Normal,InPrice,true,0);
  if (StandardHansa==false) then begin
    EditField(h5,v,70,"Изменение стоимости",ViewOnly,LastPriceChange,true,0);
  end else begin
    EditField(h3,v,70,"Изменение стоимости",ViewOnly,LastPriceChange,true,0);
  end;
  if (StandardHansa==false) then begin
    EditField(h,v+=vs ,100,"Стоим. в осн. вал. 2",Normal,InPriceB2,true,0);
    ButtonFrame(h1,v+=24,200,4,"Обновл. стоим. по поступл.");
  end else begin
    ButtonFrame(h1,v+=40,210,4,"Обновл. стоим. по поступл.");   // From dict
  end;
  RadioButton(h1,v,0,0,"не изменять",UpdateCost);
  RadioButton(h1,v+=16,1,0,"на ст-ть посл.покупки,вкл.накл.з.",UpdateCost);
  RadioButton(h1,v+=16,2,0,"на средневзвешенную",UpdateCost);
  RadioButton(h1,v+=16,3,0,"на цену посл.покупки,искл.накл.з.)",UpdateCost);
  ButtonFrame(h5=540,v=v-3*16,200,3,"Обнов.стоим. по переоц.");
  RadioButton(h5,v,0,0,"не обновлять",SRUpdateCost);
  RadioButton(h5,v+=16,1,0,"стоим. последн. переоценки",SRUpdateCost);
  RadioButton(h5,v+=16,2,0,"средневзвешенная",SRUpdateCost);
  if (StandardHansa==false) then begin
    EditField(h,v=vm+2*vs,100,"Накладные расходы",Normal,ExtraCost,true,0);
  end else begin
    EditField(h,v=vm+vs,100,"Накладные расходы",Normal,ExtraCost,true,0);   // From dict
  end;
  EditField(h,v+=vs ,100,"Средневзвешенная",Normal,WeighedAvPrice,true,0);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs ,100,"Средневзв. в осн.вал.2",Normal,WeighedAvPriceB2,true,0);
  end;
  EditField(h,v+=vs ,100,"Посл.покуп.(вкл.накл.)",Normal,LastPurchPrice,true,0);
  EditField(h,v+=vs ,100,"Посл.покуп.(иск.накл.)",Normal,LastPurchPrice2,true,0);
  EditField(h,v+=vs ,100,"Валюта посл. покупки",Normal,LastPurchCurncyCode,false,CurncyCodeSClass);
  EditField(h,v+=vs ,100,"Фикс. фрахт",Normal,FixedFreight,true,0);
  CheckBox(h1,v,0,"Включать фиксированный сбор на товар",InclItemFreight);
  CheckBox(h5,v,0,"С акцизом",HasExcise);
  end;
  Tile(tilenr,170,false,tilenr,Recepy);  tilenr = tilenr + 1;
  EditField(h,v=6 ,120,"Структура",Normal,Recepy,false,RecSClass);
  CheckBox(h1,v,0,"Разбивать на компоненты при вводе",ExplodeRec); // "Show components on documents" is better English but VERY confusing
  EditField(h,v+=vs ,120,"Структура в сч/ф",Normal,InvRecepy,false,RecSClass);
  EditField(h2,v,150,"Штрих-код",Normal,BarCode,false,0);
  EditField(h,v+=vs ,120,"Товар контракта",Normal,ContractItem,false,INSClass);
  EditField(h2,v,150,"Код произв-ля",Normal,EUCodex,false,CommoditySClass);
  v = v + vs;
  if (StandardHansa==false) then begin
    EditField(h,v,120,"Арендное фактур.",Normal,RentalItem,false,INSClass);
  end;
  EditField(h2,v,150,"Код EKN",Normal,EKNCode,false,0); // i think it is same as Commodity Code
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,150,"Класс. прод./услуг",Normal,CPSCode,false,0);
  end;
  EditField(h,v+=vs ,120,"Гарантия, мес.",Normal,WarrantyLength,true,0);
  EditField(h2,v,150,"Цвет",Normal,colnr,false,SetSClass);
  EditField(h,v+=vs,120,"Код сорт.",Normal,SortCode,true,0); 
  EditField(h,v+=vs,-40,"Альтернативный код",Normal,AlternativeCode,false,0);
  EditField(h,v+=vs,-40,"Предупреждение",Normal,WarnText1,false,0);
  Tile(tilenr,170,false,tilenr,SalesAcc);  tilenr = tilenr + 1;
  v = 6;
  vm = v;
  EditField(h,vm,55,"Счёт реализации",Normal,SalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,VATZoneNameRUS & "Счёт реализации, ",Normal,EUSalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Сч/реал., эксп.",Normal,ExpSalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs,55,"Серв. фактур. сч/реал.",Normal,SVOInvbleSalesAcc,false,AccSClass);
    EditField(h,v+=vs,55,"Серв. гар. сч/реал.",Normal,SVOWarrantySalesAcc,false,AccSClass);
    EditField(h,v+=vs,55,"Серв.контр. сч/реал.",Normal,SVOContractSalesAcc,false,AccSClass);
    EditField(h,v+=vs,55,"Серв.гудвил сч/реал.",Normal,SVOGoodwillSalesAcc,false,AccSClass);
  end;
  EditField(h,v+=vs,55,"Исп. компонент-в",Normal,CompUsage,false,AccSClass);
  EditField(h,v+=vs,55,"Счёт исп-ния мат. проекта",Normal,ProjMaterialsUsageAcc,false,AccSClass);

  EditField(h2=360,v=vm,55,"Внутр. счет стоим.",Normal,CostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,VATZoneNameRUS & "Счёт стоимости",Normal,EUCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Счёт затрат, эксп.",Normal,ExpCostAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,55,"Серв. фактур. сч/затр.",Normal,SVOInvbleCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Серв. гар. сч/затр",Normal,SVOWarrantyCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Серв. контр. сч/затр.",Normal,SVOContractCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Серв. гудвил сч/затр",Normal,SVOGoodwillCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Отель - врем. сч.",Normal,HotelWIPAcc,false,AccSClass);
  end;
  EditField(h2=530,v=vm,20,"Код НДС",Normal,VATCode,false,VATCodeSClass);
  EditField(h2,v+=vs,20,VATZoneEditFieldLabelRUS(1) & "Код НДС",Normal,VATCodeEU,false,VATCodeSClass); 
  EditField(h2,v+=vs,20,"Код НДС, эксп.",Normal,VATCodeExp,false,VATCodeSClass);
  CheckBox(h2,v+=20,0,"Вычислять налоговые сборы",Perceptions);
  if (StandardHansa==false) then begin
    CheckBox(h2,v+=16,0,"Вычислять удерживаемые налоги",Withholdings);
    EditField(h2=670,v=vm,50,"Ш-н расч. нал",Normal,TaxTemplateCode,false,TaxTemplateSClass);
    EditField(h2,v+=vs,50,VATZoneEditFieldLabelRUS(1) & "Нал. Шабл.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass); 
    EditField(h2,v+=vs,50,"Экс. ш-н расч. нал",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
  end;
  if (GuiType==kGuiiPhone or GuiType==kGuiAndroid) then begin
    Tile(tilenr,70,false,tilenr,-);  tilenr = tilenr + 1;
    AttachmentDisplay(10,10,200,200);
//    PushButton(30,10,-80,40,ToolImagePicker,"Take picture");
//    ControlLabel(0,0,0,0,"Take picture","SystemFont",17,kTextStyleBold,AdjCenter,patM4ReportsTextBlue);
  end;
  Tile(tilenr,70,false,tilenr,VARMask);  tilenr = tilenr + 1;
  EditField(h,v=6,-40,"Маска варианта",Normal,VARMask,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Порядок в отчете",Normal,VARRepOrder,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Подмножества",Normal,VARSubsets,false,VARSubsetsSClass);
  Tile(tilenr,120,true,tilenr,Math);  tilenr = tilenr + 1;
  v = 24;
  MatrixBegin(4,v,-32,-40,-,99);
  MatCol(1,24,"Язык",0,LangCode,false,LangSClass);
  MatCol(1,94,"Текст",0,Text,false,0);
  EndMatrix;
  Tile(tilenr,220,false,tilenr,CostPerc);  tilenr = tilenr + 1;
  ButtonFrame(h=100,vm=(v=20),230,6,"Первичная модель стоимости");
  RadioButton(h,v,0,0,"По умолчанию",PrimaryCostModel);
  RadioButton(h,v+=16,1,0,"Стоимость покупки",PrimaryCostModel);
  RadioButton(h,v+=16,2,0,"% _от базовой цены",PrimaryCostModel);
  EditField(h+150,v,55,"%",Normal,CostPerc,true,0);
  RadioButton(h,v+=16,3,0,"Средневзвешенная",PrimaryCostModel);
  RadioButton(h,v+=16,4,0,"По очереди",PrimaryCostModel);
  RadioButton(h,v+=16,kCostModelNoneItem,0,"Нет",PrimaryCostModel);
  ButtonFrame(h,v+=40,230,3,"Модель стоимости по очереди");
  RadioButton(h,v,0,0,"По умолчанию",QueuedCostModel);
  RadioButton(h,v+=16,1,0,"FIFO цена",QueuedCostModel);
  RadioButton(h,v+=16,2,0,"LIFO цена",QueuedCostModel);

  ButtonFrame(h2=380,v=vm,200,3,"Стоимость на сер.номер");
  RadioButton(h2,v,0,0,"По умолчанию",FIFOPerSerialNr);
  RadioButton(h2,v+=16,1,0,"Стоимость не на серийн.номер",FIFOPerSerialNr);
  RadioButton(h2,v+=16,2,0,"Стоимость на серийный номер",FIFOPerSerialNr);
  ButtonFrame(h2,v+=40,200,3,"Стоимость по складам");
  RadioButton(h2,v,0,0,"По умолчанию",FIFOPerLocation);
  RadioButton(h2,v+=16,1,0,"Стоим.по очер.не по складам",FIFOPerLocation);
  RadioButton(h2,v+=16,2,0,"Стоим.по очер.по кажд.кладу",FIFOPerLocation);
  ButtonFrame(h2,v+=40,200,3,"Средневзвешенная по складам");
  RadioButton(h2,v,0,0,"По умолчанию",WAPerLocation);
  RadioButton(h2,v+=16,1,0,"Средневзвеш.не по складам",WAPerLocation);
  RadioButton(h2,v+=16,2,0,"Средневзвеш.по кажд.складу",WAPerLocation);
/*5.3
  ButtonFrame(h2,v+=40,200,3,"Cost Price per Location");
  RadioButton(h2,v,0,0,"По умолчанию",CostPricePerLocation);
  RadioButton(h2,v+=16,1,0,"Cost Price not per Location",CostPricePerLocation);
  RadioButton(h2,v+=16,2,0,"Cost Price per Location",CostPricePerLocation);
*/
  if (StandardHansa==false) then begin
    Tile(tilenr,240,false,tilenr,-); tilenr = tilenr + 1;
    h = 180; v = 6;
    label = UserDefined("INVc","UserStr1");
    if (nonblank(label)) then begin
      EditField(h,v=6 ,-40,label,Normal,UserStr1,false,0);
    end;
    label = UserDefined("INVc","UserStr2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr2,false,0);
    end;
    label = UserDefined("INVc","UserStr3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr3,false,0);
    end;
    label = UserDefined("INVc","UserStr4");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr4,false,0);
    end;
    label = UserDefined("INVc","UserStr5");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr5,false,0);
    end;
    label = UserDefined("INVc","UserVal1");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal1,true,0);
    end;
    label = UserDefined("INVc","UserVal2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal2,true,0);
    end;
    label = UserDefined("INVc","UserVal3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal3,true,0);
    end;
    label = UserDefined("INVc","UserDate1");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate1,true,PasteCurDate);
    end;
    label = UserDefined("INVc","UserDate2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate2,true,PasteCurDate);
    end;
    label = UserDefined("INVc","UserDate3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate3,true,PasteCurDate);
    end;
  end;
  Tile(tilenr,400,false,tilenr,Math2); tilenr = tilenr + 1;
  StaticText(50,v=20,"Записки",true);  
  TextField(60,v-5,-20,370,Math2,0);
  if (HasCharts) then begin
    Tile(tilenr,400,false,tilenr,-); tilenr = tilenr + 1;
    ChartArea(10,6,-10,390,"$INDCLass_BIChart");
  end;
  if (UserCanReport("INInfoRn","",true)) then begin
    SpecialMenu("Справка по товару",'I',0,"INStatusINDsm");
  end;
//  SpecMenuItem("Recalculate Price List",' ',2);
  if (UserCanReport("INrsRn","INrsRClass",true)) then begin
    SpecialMenu("История товара",'h',3,"INHistINDsm");//CMD H DOES HIDE HANSA
  end;
  SpecialMenu("Статус товара по складу",' ',4,"LocItemStatDsm");
  if (HasJewelleryInterface) and (UserCanReport("INInfoRn","",true)) then begin
    SpecialMenu("Статус товара по альт. коду",'S',5,"ItemStatusAltINDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);         
  SpecialMenu("Создать товар на закупку",' ',1,"PIFromINDsm");         
  SpecialMenu("Создать приём товара",' ',2,"RecFromINDsm");         
  EndWindow;
end;

window ORDClass:2
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs,h5,flipnr,width;
  string 255 label;
  Integer rn;
  
  WindowBegin("Счёт клиенту",ORDClass,CGview,-);
  SetWRect(20,80,750,460);
  Sizeable(-1,-1,0,0);
  UseView(ORVc);
  ActiveFieldOnNew("CustCode");
  CommunicateButton;
  Tile(0,74,false,"",CustCode);
  EditField(75,vm=(v=6),95,"Номер",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Получатель",Normal,CustCode,false,CUSClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Наим.",Normal,Addr0,false,0);
  if (StandardHansa==false) then begin
    //EditField(h,vm=(v+=20),135,"Офиц. Но.",Normal,OfficialSerNr,false,LegalInvNrSClass);
    EditField(h,vm=(v+=20),90,"№ счета кл.",Normal,CustOrdNr,false,0);// Edit ************************** Wednesday, 21 December 2016 19:23:56
    EditField(h+150,vm,90,"Статус",Normal,Comment,false,0);// Edit ************************** Wednesday, 21 December 2016 19:23:56
    CheckBox(h4=-100,v,0,"OK",OKFlag);
  end else begin
    CheckBox(h4=-100,vm=(v+=20),0,"OK",OKFlag);   // From dict
  end;
//  CheckBox(h+120,vm,0,"Закрыто",Closed);
//  CheckBox(h+240,vm,0,"Reserved",Reserved);
  TileButton(1,"Условия");
  TileButton(2,"Товары");
  TileButton(3,"Валюта");
  TileButton(4,"Условия");
  TileButton(5,"Прайс-лист");
  TileButton(6,"Юр. адрес");
  TileButton(7,"Адрес дост.");
  Tile(1,110,false,"1",OrdDate);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Дата",Normal,OrdDate,false,PasteCurDate);
  EditField(h1,v+=vs,25,"Условия оплаты",Normal,PayDeal,false,PDSClass);
  EditField(h1,v+=vs,80,"Продавец",Normal,SalesMan,false,UserSClass);
  EditField(h1,v+=vs,80,"Вид счёта",Normal,OrderClass,false,OrderClassSClass);
  EditField(h1,v+=vs,80,"Склад",Normal,Location,false,LocationSClass);
  //EditField(h1,v+=vs,82,"Заплан. отгрузка",Normal,PlanShip,false,PasteCurDate);
  //EditField(h1,v+=vs,82,"Дата отправки",Normal,DespatchDate,false,PasteCurDate);
  //EditField(h1,v+=vs,82,"Время отправки",Normal,DespatchTime,false,PasteCurTime);
  
  EditField(h2,v=vm,-100,"Отгрузка",Normal,ShipAddr0,false,0);   // From dict
  EditField(h2,v+=vs,-100,"Адрес",Normal,ShipAddr1,false,0);
  EditField(h2,v+=vs,-100,"",Normal,ShipAddr2,false,0);
  EditField(h2,v+=vs,-100,"",Normal,ShipAddr3,false,0);
  EditField(h2,v+=vs,-100,"",Normal,DelAddr3,false,0);
  EditField(h2,v+=vs,-100,"",Normal,DelAddr4,false,0);
  //EditField(h2,v=vm,135,"Ответственный",Normal,OurContact,false,0);
  //EditField(h2,v+=vs,135,"Внимание",Normal,CustContact,false,ContactSClass);
  //EditField(h2,v+=vs,135,"Объекты",Normal,Objects,false,ObjSClass);
  //EditField(h2,v+=vs,135,"Ссылка",Normal,RefStr,false,0);
  //EditField(h2,v+=vs,135,"№ счета кл.",Normal,CustOrdNr,false,0);
  
  /*if (StandardHansa==false) then begin
    EditField(h3,v+=vs,80,"Проект",Normal,PRCode,false,PRSClass);
  end;*/
  
  /*if (StandardHansa==false) then begin
    EditField(h3,v+=vs,80,"Тип счета",Normal,OrderType,false,SetSClass);
    EditField(h3,v+=vs,80,"Контракт",Normal,ORCONr,false,ORCOSClass);
  end;*/
  CheckBox(h4,v=6,0,"Закрыт",Closed);
  CheckBox(h4,v+=16,0,"Зарезервир.",Reserved);
  EnterSkip(Math);
  Tile(2,220,true,"2",Math);
//  CheckBox(20,-20,0,"OK",OKFlag);
  EditField(55,-41,50,"Валюта",Normal,CurncyCode,false,CurncyCodeSClass);
  if (UseTaxTemplatesforTaxCalc==false) then begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(160,-41,70,"Приб. %",Normal,GPProc,true,0);
      EditField(160,-21,70,"Итоговая прибыль",ViewOnly,TotGP,true,0);
    end;
    EditField(290,-41,70,"Налог",ViewOnly,TAX2Sum,true,0);
    EditField(290,-21,70,"Вн.налог",ViewOnly,TAX1Sum,true,0);
    EditField(410,-41,100,"НДС",ViewOnly ,Sum3,true,0);
  end else begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(290,-41,70,"Приб. %",Normal,GPProc,true,0);
      EditField(290,-21,70,"Итоговая прибыль",ViewOnly,TotGP,true,0);
    end;
    EditField(410,-41,100,"НДС",ViewOnly ,Sum3,true,0);  
  end;
  EditField(410,-21,100,"База",ViewOnly,BaseSum4,true,0);
  EditField(-150,-41,100,"Подытог",ViewOnly ,Sum1,true,0);
  EditField(-150,-21,100,"ИТОГО",ViewOnly ,Sum4,true,0);
  v = 24;
  MatrixBegin(3,v,-50,-49,-,200);
  MatTypedRow(stp);
  flipnr = 0;
  Flip(flipnr); flipnr = flipnr + 1;
  MatText(t=9,32,"Итого",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-80,"Сумма",0,-1,ViewOnly,0,Sum,true,0);
  MatText(t=17,32,"Заголовок",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatCol(t=1,32,"Товар",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Qty",0,Quant,true,0);
  t = 1;
  if (HasVarieties) then begin
    MatCol(t,94,"К-во",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"К-во",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Товар",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Qty",0,Quant,true,0);
  if (HasVarieties) then begin
    MatCol(t,94,"К-во",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"К-во",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatText(t=10,32,"Эта и нижележащие строки не будут печататься",false);
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Налоговый сбор",true);
  MatCol(t,132,"",0,Region,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,0);
  MatCol(t,452,"",0,Spec,false,0);
  Flip(flipnr); flipnr = flipnr + 1;
//  MatCol(t=1,194,"Описание",0,Spec,false,0);
  t = 1;
  MatCol(t,144,"Описание",0,Spec,false,0);
  MatCol(t,-235,"Цена",0,Price,true,0);  // use PL2SClass for filtered datalist
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Сумма",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Описание",0,Spec,false,0);
  MatCol(t,-235,"Цена",0,Price,true,0);  // use PL2SClass for filtered datalist
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Сумма",0,Sum,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Описание",0,Spec,false,0);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-284,"Код товара клиента",0,CustArtCode,false,CUINSClass);
    MatCol(t,-224,"Счет",0,SalesAcc,false,AccSClass);
    MatCol(t,-164,"Объект",0,Objects,false,ObjSClass);
    MatCol(t,-70,"Ш-н",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-264,"Код товара клиента",0,CustArtCode,false,CUINSClass);
    MatCol(t,-184,"Счет",0,SalesAcc,false,AccSClass);
    MatCol(t,-124,"Объект",0,Objects,false,ObjSClass);
    MatCol(t,-30,"НДС",0,VATCode,false,VATCodeSClass);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Описание",0,Spec,false,0);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-284,"Код товара клиента",0,CustArtCode,false,CUINSClass);
    MatCol(t,-224,"Счет",0,SalesAcc,false,AccSClass);
    MatCol(t,-164,"Объект",0,Objects,false,ObjSClass);
    MatCol(t,-70,"Ш-н",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-264,"Код товара клиента",0,CustArtCode,false,CUINSClass);
    MatCol(t,-184,"Счет",0,SalesAcc,false,AccSClass);
    MatCol(t,-124,"Объект",0,Objects,false,ObjSClass);
    MatCol(t,-30,"НДС",0,VATCode,false,VATCodeSClass);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Описание",0,Spec,false,0);
  MatCol(t,344,"Тип заказа",0,OrderType,false,SetSClass);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-245,"Цена",0,Price,true,0); // use PL2SClass for filtered datalist
    MatCol(t,-175,"%",0,vRebate,true,0);
    MatCol(t,-140,"Стоимость",0,BasePrice,true,0);
    MatCol(t,-70,"Прибыль",0,rowGP,true,0);
  end else begin
    MatCol(t,-235,"Цена за шт.",0,Price,true,0); // use PL2SClass for filtered datalist
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Сумма",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Описание",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-245,"Цена",0,Price,true,0); // use PL2SClass for filtered datalist
    MatCol(t,-175,"%",0,vRebate,true,0);
    MatCol(t,-140,"Стоимость",0,BasePrice,true,0);
    MatCol(t,-70,"Прибыль",0,rowGP,true,0);
  end else begin
    MatCol(t,-235,"Цена",0,Price,true,0); // use PL2SClass for filtered datalist
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Сумма",0,Sum,true,0);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Описание",0,Spec,false,0);
  MatCol(t,-300,"Продавцы",0,Salesmen,false,UserSClass);
  MatCol(t,-236,"Отгруж.",0,Shipd1,true,0);
  MatCol(t,-184,"Отгруж. Ок",0,Shipd2,true,0);
  MatCol(t,-132,"Отфактурир.",0,Invd,true,0);
  MatCol(t,-80,"Структура",0,Recepy,false,RecSClass);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Описание",0,Spec,false,0);
  MatCol(t,-290,"Предвар.",0,Shipd1,true,0);
  MatCol(t,-220,"Отгрузка",0,Shipd2,true,0);
  MatCol(t,-150,"Счёт-фактура",0,Invd,true,0);
  MatCol(t,-80,"Структура",0,Recepy,false,RecSClass);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Описание",0,Spec,false,0);
  MatCol(t,-290,"Серийный номер",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-150,"Запланированная отгрузка",0,PlanShipRow,true,PasteCurDate);
  MatCol(t,-70,"Фактор цены",0,PriceFactor,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Описание",0,Spec,false,0);
  MatCol(t,-290,"Серийный номер",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-150,"Запланированная отгрузка",0,PlanShipRow,true,PasteCurDate);
  MatCol(t,-70,"Фактор цены",0,PriceFactor,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Описание",0,Spec,false,0);
  MatCol(t,-315,"Накладная",0,ShipNote,false,0);
  MatCol(t,-210,"Склад",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-145,"Место",0,Position,true,UsedPosSClass);
  end;
  MatCol(t,-90,"Источник",0,Source,true,SourceSClass);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Описание",0,Spec,false,0);
  MatCol(t,-315,"Накладная",0,ShipNote,false,0);
  MatCol(t,-210,"Склад",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-145,"Место",0,Position,true,UsedPosSClass);
  end;
  MatCol(t,-90,"Источник",0,Source,true,SourceSClass);
  if (StandardHansa==false) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Дата получения",0,PickingDate,false,PasteCurDate);
    MatCol(t,-390,"Время пол.",0,PickingTime,false,PasteCurTime);
    MatCol(t,-320,"Дата погр.",0,InloadingDate,true,PasteCurDate);
    MatCol(t,-230,"Время погр.",0,InloadingTime,true,PasteCurTime);
    MatCol(t,-160,"Дата отправ.",0,DespatchRowDate,true,PasteCurDate);
    MatCol(t,-70,"Время отпр.",0,DespatchRowTime,true,PasteCurTime);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Дата получения",0,PickingDate,false,PasteCurDate);
    MatCol(t,-390,"Время пол.",0,PickingTime,false,PasteCurTime);
    MatCol(t,-320,"Дата погр.",0,InloadingDate,true,PasteCurDate);
    MatCol(t,-230,"Время погр.",0,InloadingTime,true,PasteCurTime);
    MatCol(t,-160,"Дата отправ.",0,DespatchRowDate,true,PasteCurDate);
    MatCol(t,-70,"Время отпр.",0,DespatchRowTime,true,PasteCurTime);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Описание",0,Spec,false,0);
  MatCol(t,-315,"Ед.",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Кол-во ед.",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Ширина",0,UnitXval,true,0);
  MatCol(t,-160,"Высота",0,UnitYval,true,0);
  MatCol(t,-120,"Глубина",0,UnitZval,true,0);
  MatCol(t,-80,"Цена ед.",0,UnitFactPrice,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Описание",0,Spec,false,0);
  MatCol(t,-315,"Ед.",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Кол-во ед.",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Ширина",0,UnitXval,true,0);
  MatCol(t,-160,"Высота",0,UnitYval,true,0);
  MatCol(t,-120,"Глубина",0,UnitZval,true,0);
  MatCol(t,-80,"Цена ед.",0,UnitFactPrice,true,0);
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");         
  RowMenuItem(0,"Статус товара",'I','I',0,"ItemStatusORDsm");         
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Предыдущие цены на продажу",' ',' ',0,"ORLastSPrsm");         
  end;
  RowMenuItem(0,"Добавить заголовок",' ',' ',0,"ORAddHeaderLine");         
  RowMenuItem(0,"Добавить скрытую строку",' ',' ',0,"ORAddHidLine");         
  RowMenuItem(0,"Добавить строку с промежуточным результатом",' ',' ',0,"SubtotalORDsm");         
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Изменение скидки менеджером",' ',' ',0,"MgrsDiscOverrideORDsm"); 
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,6,"F");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,7,"G");
  if (StandardHansa==false) then begin
    v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,8,"H");
  end;
  Tile(3,70,false,"3",FrRate);
  vs = 20;
  EditField(h=110,v=6,50,"Валюта",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+vs,50,"Основная валюта 1",Normal,BaseRate1,true,0);  
  EditField(h,v+(vs*2),50,"Основная валюта 2",Normal,BaseRate2,true,0);    
  EditField(h2=295,v,50,"Курс",Normal,FrRate,true,0);  
  RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Основная валюта 1",false);  
  RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Основная валюта 2",false);     
  Tile(4,110,false,"4",ShipDeal);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,v=6,80,"Условия отгрузки",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h1,v+=vs,80,"Метод отгрузки",Normal,ShipMode,false,DMSClass);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Маршрут",Normal,Sorting,false,DelRouteSClass);
  end;
  EditField(h1,v+=vs,80,"Склад",Normal,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Подразделение",Normal,BranchID,false,AllCUSClass);
  end;
  EditField(h2,v=vm,80,"Итого кол-во",ViewOnly,TotQty,true,0);
  EditField(h2,v+=vs,80,"Итого вес",ViewOnly,TotWeight,true,0);
  EditField(h2,v+=vs,80,"Итого объем",ViewOnly,TotVolume,true,0);
  EditField(h2,v+=vs,80,"Фрахт",Normal,FrPrice,true,0);
  EditField(h2,v+=vs,80,"Код интрастата",Normal,IntrastatTransCode,true,IntrastatTransCodeSClass);  
  if (StandardHansa==false) then begin
    EditField(h3,v,80,"Код НДС фрахта",Normal,FrVATCode,true,VATCodeSClass);
  end;
  CheckBox(473,v=vm,0,"Сч/ф перед отгрузкой",InvBeforeShip);
  CheckBox(473,v+=16,0,"Аннулировать доставленное кол-во",SHShipSetToZero); 
  Tile(5,130,false,"5",PriceList);
  h3 = 530;
  EditField(h1,v=vm,80,"Прайс-лист",Normal,PriceList,false,PLDefSClass);
  EditField(h1,v+=vs,80,"Таблица скидок",ViewOnly,RebCode,false,0);
//  EditField(h2,v+=vs,80,"Disc %",ViewOnly,DiscPerc,false,0);
//  EditField(h2,v+=vs,80,"Disc Amnt",ViewOnly,DiscSum,false,0);
  EditField(h1,v+=vs,80,"Плательщик",Normal,InvoiceToCode,false,CUSClass);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Кредитная карта",Normal,CreditCard,false,CreditCardSClass);
    EditField(h1,v+=vs,80,"Авторизация",Normal,AuthorizationCode,false,0);
  end;
  EditField(h1,v+=vs,-20,"Комментарий",Normal,Comment,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment4,false,0);
  v = vm;
  if (HasSalesGroup) then begin
    EditField(h2,v,80,"Группа по продажам",Normal,SalesGroup,false,SalesGroupSClass);
    v = v + vs;
  end;
  EditField(h2,v,80,"Язык",Normal,LangCode,false,LangSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Комиссия",Normal,Commision,true,0);
    EditField(h2,v+=vs,80,"Итого вкл ком.",ViewOnly,SumIncCom,true,0);
  end;
  if (HasTREO) then begin
    EditField(h3,v=vm,80,"TREO №",Normal,TREONr,false,0);
    EditField(h3,v+=vs,80,"TREO дата зверш.",Normal,TREOExpDate,false,PasteCurDate);
  end;
  Tile(6,250,false,"6",Addr1);
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Счёт-фактура"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Адрес"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  EditField(h,vm=(v+=vs),80,"Страна",Normal,InvCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin 
    EditField(h2-89,v,232,"",ViewOnly,InvCountryName,false,0);
    h5 = -170;
    width = 150;
  end else begin
    h5 = -270;
    width = 135;
  end;
  EditField(h5,v,width,"Банк",Normal,BankCode,false,BankSClass);
  if (HasApprovals) then begin
    SoftEditField(h3=h+4,v=(vm+=40),123,"Статус утверждения",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
/*  
    ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Статус утверждения");
    RadioButton(h3,v,kAcceptanceStateNotRequired,0,"не обязательно",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"не начато",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"не запрошено",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStatePending,0,"в ожидании",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"утверждено",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"отклонено",AcceptanceStatus);
*/    
    v = VATZoneButtonsLabelsrus(h3=290,v=vm,170,16);
  end else begin
    v = VATZoneButtonsLabelsrus(h3=290,v=vm+20,170,16);
  end;
  EditField(h2=-170,v=vm,150,"Регион",Normal,Region,false,RegionSClass);
  EditField(h2,v+=vs,150,"ИНН",Normal,VATNr,false,0);
  EditField(h2,v+=vs,150,"GLN",ViewOnly,RecipientGLN,false,0);  
  EditField(h2,v+=vs,150,"Телефон",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Факс",Normal,Fax,false,0);
  Tile(7,170,false,"7",ShipAddr0);
  if (StandardHansa==false) then begin
    EditField(h1,v=6,80,"Код адреса",Normal,DelAddrCode,false,DelAddr3SClass);
    EditField(h1,v+=vs,-20,"Отгрузка",Normal,ShipAddr0,false,0);
  end else begin
    EditField(h1,v=6,-20,"Отгрузка",Normal,ShipAddr0,false,0);   // From dict
  end;
  EditField(h1,v+=vs,-20,"Адрес",Normal,ShipAddr1,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  EditField(h1,v+=vs,80,"Страна",Normal,DelCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin 
    EditField(h1+91,v,232,"",ViewOnly,DelCountryName,false,0);
    h5 = -170;
    width = -20;
  end;  
  EditField(h2,v,150,"GLN доставки",ViewOnly,DelRecipientGLN,false,0);  
//  EditField(h1+200,v,80,"#VAT Code#",Normal,CustVATCode,false,0);
  EnterSkip(OrdDate);
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Статус счета",'r',5,"ORInfoRnORDsm");
    SpecialMenu("Статус товара",'I',2,"ItemStatusORDsm");
    SpecialMenu("Создать отгрузку",'L',0,"SHFromORDsm");
    SpecialMenu("Создать сч/ф",'F',1,"IVFromORDsm");
    //SpecialMenu("Добавить подытог",' ',14,"SubtotalORDsm");
/*
email not working yet
    SpecialMenu("Создать эл. письмо",'m',11,"CreateMailFromORDsm");
*/
  end else begin
  /*SpecialMenu("Пересчитать скидку",' ',11,"RecalcDiscountORDsm");
  /*if (StandardHansa==false) then begin
    SpecialMenu("Пересчитать вес и объем",' ',10,"RecalculateWeightORDsm");
  end;*/
  //SpecialMenu("Обновить товары валютного прейскуранта",' ',7,"UpdatePricesORDsm");
  SpecialMenu("Поиск товара",'f',1,"ItemSearchDsm");
  SpecialMenu("Статус счета",'r',5,"ORInfoRnORDsm");
  /*if (StandardHansa==false) then begin
    SpecialMenu("Распечатать внутренний заказ",' ',4,"Or2FormORDsm");
  end;*/
  //SpecialMenu("Резервирования",' ',15,"OrderReservORDsm");
  /*if (GuiType==kGuiiPhone) then begin
    SpecialMenu("Подписать",' ',10,"SignORDsm");         
  end;*/
  
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);         
//  SpecialMenu("Activity",'c',9,"CreateActFromORDsm");
  SpecialMenu("Создать отгрузку",'L',0,"SHFromORDsm");         
  /*if (HasDownpayments) then begin
  SpecialMenu("Создать сч для предв. платежа",' ',3,"DownPayFromORDsm");         
  end;*/
  /*if (HaseMail) then begin
  SpecialMenu("Создать эл. письмо",'m',11,"CreateMailFromORDsm");
  end;*/
  SpecialMenu("Создать реализацию",'F',1,"IVFromORDsm");
  /*if (HasModTS) then begin
    SpecialMenu("Создать проект",' ',9,"CreatePRFromORDsm");
    SpecialMenu("Создать бюджет проекта",' ',10,"CreateTBBUFromORDsm");
  end;*/
  /*if (HasModPO) then begin
    SpecialMenu("Создать заказ поставщику",' ',4,"POFromORDsm");  
  end;*/
  //SpecialMenu("Создать возврат товаров",'B',6,"RetFromORsm");
  //SpecialMenu("Создать перемещение по складу",' ',8,"StockMovFromORDsm");
  /*if (HasApprovals) then begin
    SpecialMenu("Запросить утверждение",' ',6,"ORSendforAcceptanceORDsm"); 
    SpecialMenu("Отменить запрос утверждения",' ',2,"CancelApprovalRequestDsm"); 
  end;*/
  //SpecialMenu("Добавить клиента",' ',0,"AddCustomerORDsm");         
  //SpecialMenu("Добавить товар",' ',0,"AddItemORDsm");           
  end;
  EndWindow;
end;


window ORLClass:3
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  Integer pos,rn;

  WindowBegin("Счета клиентам",ORLClass,CGmlist,-);
  SpawnClass(ORDClass);
  SetWRect(20,80,900,298);
  Sizeable(-1,-1,0,0);
  UseView(ORVc);
  FormName(PrintORL);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"№",SerNr,false,SerNr);
  RlColKey(79,79,"ОК",OKFlag,false,OKFlag);
  pos = 111;
  if (HasModIN) then begin
    RlColKey(pos,pos,"отгруж",ShipMark,false,ShipFlag);
    pos = pos + 32;
  end;
  if (HasModSL) then begin
    RlColKey(pos,pos,"Отфакт",InvMark,false,InvFlag);
    pos = pos + 32;
  end;
  RlCol(pos,pos,"закр",Closed,false);
  pos = pos + 32;
  RlColKey(pos,pos,"Дата заказа",OrdDate,false,OrdDate);
  pos = pos + 80;
  if (HasMultiLocations) then begin
    //RlCol   (pos,pos,"Местоположение",Location,false);
    RlCol   (pos,pos,"Статус",Comment,false);// Edit ************************** Wednesday, 21 December 2016 20:17:15
    pos = pos + 60;
  end;
  RlColKey(pos,pos,"Номер заказа клиента",CustOrdNr,false,CustOrdNr);
  pos = pos + 80;
  RlColKey(pos,pos,"Клиент",CustCode,false,CustCode);
  pos = pos + 60;
  RlColKey(pos,pos,"Наим.",Addr0,false,Name);
  if (IsEnterprise) then begin
    /*if (AcceptanceStatusColumnTest("ORVc")) then begin 
      CalculatedColumn(-240,-240,"Подтв.","ORLClassAcceptanceStatus",false);
    end;*/
    RlCol(-200,-200,"Оплата",Addr3,true);
    //RlColKey(-200,-200,"Класс",OrderClass,false,OrderClass);
    RlColKey(-75,-75,"Итого",Sum4,true,Sum4);
    //RlCol(-75,-75,"Аванс",DownPaySent,true);
  end else begin
    RlColKey(-55,-55,"ИТОГО",Sum4,true,Sum4);
  end;
  if (HasLimitedAccess) then begin
    BrowseSubsetButton(-40,-15);
  end;
  SearchField("Поиск");
  if (GuiType==kGuiMetro) then begin
    rn = 0;
    RowMenuBegin("");
    if (HasModIN) then begin
      RowMenuItem(rn,"Создать отгрузку",'L','L',4300,"SHFromORLsm"); rn = rn + 1;  
    end;
    RowMenuItem(rn,"Создать счет-фактуры",'L','L',4300,"IVFromORLsm"); rn = rn + 1;  
    if (HasDownpayments) then begin
      RowMenuItem(rn,"Созжать счет-фактуру на аванс",'o','o',4300,"DownPayFromORLsm"); rn = rn + 1;  
    end;
    RowMenuItem(rn,"Статус счет",'r','r',4300,"ORStatusORLsm"); rn = rn + 1;  
    if (HasModPO) then begin
      RowMenuItem(rn,"Создать заказ поставщику",' ',' ',4300,"POFromORLsm"); rn = rn + 1;  
    end;
    if (HasModCRM) then begin
      RowMenuItem(rn,"Создать деятельность",'c','c',4300,"ActFromORLsm"); rn = rn + 1;
    end;
    if (IsEnterprise) then begin
      RowMenuItem(rn,"Отметить счет как сфактурированный",' ',' ',4300,"ORToInvORLsm"); rn = rn + 1;  
    end;
    EndRowMenu;
  end else begin
    SpecialMenu("Статус заказа",'r',3,"ORStatusORLsm");         
    if (IsEnterprise) then begin
      SpecialMenu("По заказу выставлен счёт",' ',6,"ORToInvORLsm");         
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);         
    if (HasModIN) then begin
      SpecialMenu("Создать отгрузку",'L',0,"SHFromORLsm");
    end;
    SpecialMenu("Создать реализацию",'F',1,"IVFromORLsm");
    if (HasDownpayments) then begin
      SpecialMenu("Создать счет-фактуру на аванс",'o',2,"DownPayFromORLsm");
    end;
    if (HasModPO) then begin
      SpecialMenu("Создать заказ поставщику",' ',4,"POFromORLsm");
    end;
    if (HasModCRM) then begin
      SpecialMenu("Создать деятельность",'c',5,"ActFromORLsm");
    end;
  end;
  EndWindow;
end;

window PromItemReportRClass:1
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("Товары с Prom.ua",PromItemReportRClass,CGRcW,RcType);
  SetWRect(20,80,440,150);

  EndWindow;
end;

window ItemTurnoverRClass:1
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("Оборот по товарам",ItemTurnoverRClass,CGRcW,RcType);
  SetWRect(20,80,450,200);
	h = 50;
	v = 40;
	
  PeriodField(h,v,"Период");

	
  EndWindow;
end;
